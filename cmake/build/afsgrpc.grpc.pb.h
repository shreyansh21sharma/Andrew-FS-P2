// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: afsgrpc.proto
// Original file comments:
// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#ifndef GRPC_afsgrpc_2eproto__INCLUDED
#define GRPC_afsgrpc_2eproto__INCLUDED

#include "afsgrpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace afsgrpc {

// The greeting service definition.
class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "afsgrpc.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::afsgrpc::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status rpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::afsgrpc::FetchReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::FetchReply>> Asyncrpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::FetchReply>>(Asyncrpc_fetchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::FetchReply>> PrepareAsyncrpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::FetchReply>>(PrepareAsyncrpc_fetchRaw(context, request, cq));
    }
    virtual ::grpc::Status rpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::afsgrpc::StoreReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StoreReply>> Asyncrpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StoreReply>>(Asyncrpc_storeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StoreReply>> PrepareAsyncrpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StoreReply>>(PrepareAsyncrpc_storeRaw(context, request, cq));
    }
    virtual ::grpc::Status rpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::afsgrpc::StatReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StatReply>> Asyncrpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StatReply>>(Asyncrpc_getFileStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StatReply>> PrepareAsyncrpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StatReply>>(PrepareAsyncrpc_getFileStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::afsgrpc::ListDirReply>> rpc_listDir(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::afsgrpc::ListDirReply>>(rpc_listDirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsgrpc::ListDirReply>> Asyncrpc_listDir(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsgrpc::ListDirReply>>(Asyncrpc_listDirRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsgrpc::ListDirReply>> PrepareAsyncrpc_listDir(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::afsgrpc::ListDirReply>>(PrepareAsyncrpc_listDirRaw(context, request, cq));
    }
    virtual ::grpc::Status rpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::afsgrpc::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>> Asyncrpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>>(Asyncrpc_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>> PrepareAsyncrpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>>(PrepareAsyncrpc_rmdirRaw(context, request, cq));
    }
    virtual ::grpc::Status rpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::afsgrpc::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>> Asyncrpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>>(Asyncrpc_unlinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>> PrepareAsyncrpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>>(PrepareAsyncrpc_unlinkRaw(context, request, cq));
    }
    virtual ::grpc::Status rpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::afsgrpc::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>> Asyncrpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>>(Asyncrpc_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>> PrepareAsyncrpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>>(PrepareAsyncrpc_mkdirRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a greeting
      virtual void SayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest* request, ::afsgrpc::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest* request, ::afsgrpc::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void rpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest* request, ::afsgrpc::FetchReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest* request, ::afsgrpc::FetchReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void rpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest* request, ::afsgrpc::StoreReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest* request, ::afsgrpc::StoreReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void rpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest* request, ::afsgrpc::StatReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest* request, ::afsgrpc::StatReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void rpc_listDir(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest* request, ::grpc::ClientReadReactor< ::afsgrpc::ListDirReply>* reactor) = 0;
      virtual void rpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void rpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void rpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest* request, ::afsgrpc::OutputInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest* request, ::afsgrpc::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::FetchReply>* Asyncrpc_fetchRaw(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::FetchReply>* PrepareAsyncrpc_fetchRaw(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StoreReply>* Asyncrpc_storeRaw(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StoreReply>* PrepareAsyncrpc_storeRaw(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StatReply>* Asyncrpc_getFileStatRaw(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::StatReply>* PrepareAsyncrpc_getFileStatRaw(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::afsgrpc::ListDirReply>* rpc_listDirRaw(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::afsgrpc::ListDirReply>* Asyncrpc_listDirRaw(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::afsgrpc::ListDirReply>* PrepareAsyncrpc_listDirRaw(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>* Asyncrpc_rmdirRaw(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>* PrepareAsyncrpc_rmdirRaw(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>* Asyncrpc_unlinkRaw(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>* PrepareAsyncrpc_unlinkRaw(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>* Asyncrpc_mkdirRaw(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::afsgrpc::OutputInfo>* PrepareAsyncrpc_mkdirRaw(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::afsgrpc::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status rpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::afsgrpc::FetchReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::FetchReply>> Asyncrpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::FetchReply>>(Asyncrpc_fetchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::FetchReply>> PrepareAsyncrpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::FetchReply>>(PrepareAsyncrpc_fetchRaw(context, request, cq));
    }
    ::grpc::Status rpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::afsgrpc::StoreReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::StoreReply>> Asyncrpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::StoreReply>>(Asyncrpc_storeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::StoreReply>> PrepareAsyncrpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::StoreReply>>(PrepareAsyncrpc_storeRaw(context, request, cq));
    }
    ::grpc::Status rpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::afsgrpc::StatReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::StatReply>> Asyncrpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::StatReply>>(Asyncrpc_getFileStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::StatReply>> PrepareAsyncrpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::StatReply>>(PrepareAsyncrpc_getFileStatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::afsgrpc::ListDirReply>> rpc_listDir(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::afsgrpc::ListDirReply>>(rpc_listDirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::afsgrpc::ListDirReply>> Asyncrpc_listDir(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::afsgrpc::ListDirReply>>(Asyncrpc_listDirRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::afsgrpc::ListDirReply>> PrepareAsyncrpc_listDir(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::afsgrpc::ListDirReply>>(PrepareAsyncrpc_listDirRaw(context, request, cq));
    }
    ::grpc::Status rpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::afsgrpc::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>> Asyncrpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>>(Asyncrpc_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>> PrepareAsyncrpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>>(PrepareAsyncrpc_rmdirRaw(context, request, cq));
    }
    ::grpc::Status rpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::afsgrpc::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>> Asyncrpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>>(Asyncrpc_unlinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>> PrepareAsyncrpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>>(PrepareAsyncrpc_unlinkRaw(context, request, cq));
    }
    ::grpc::Status rpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::afsgrpc::OutputInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>> Asyncrpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>>(Asyncrpc_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>> PrepareAsyncrpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>>(PrepareAsyncrpc_mkdirRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest* request, ::afsgrpc::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest* request, ::afsgrpc::HelloReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void rpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest* request, ::afsgrpc::FetchReply* response, std::function<void(::grpc::Status)>) override;
      void rpc_fetch(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest* request, ::afsgrpc::FetchReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void rpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest* request, ::afsgrpc::StoreReply* response, std::function<void(::grpc::Status)>) override;
      void rpc_store(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest* request, ::afsgrpc::StoreReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void rpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest* request, ::afsgrpc::StatReply* response, std::function<void(::grpc::Status)>) override;
      void rpc_getFileStat(::grpc::ClientContext* context, const ::afsgrpc::StatRequest* request, ::afsgrpc::StatReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void rpc_listDir(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest* request, ::grpc::ClientReadReactor< ::afsgrpc::ListDirReply>* reactor) override;
      void rpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void rpc_rmdir(::grpc::ClientContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void rpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void rpc_unlink(::grpc::ClientContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void rpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest* request, ::afsgrpc::OutputInfo* response, std::function<void(::grpc::Status)>) override;
      void rpc_mkdir(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest* request, ::afsgrpc::OutputInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::afsgrpc::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::FetchReply>* Asyncrpc_fetchRaw(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::FetchReply>* PrepareAsyncrpc_fetchRaw(::grpc::ClientContext* context, const ::afsgrpc::FetchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::StoreReply>* Asyncrpc_storeRaw(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::StoreReply>* PrepareAsyncrpc_storeRaw(::grpc::ClientContext* context, const ::afsgrpc::StoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::StatReply>* Asyncrpc_getFileStatRaw(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::StatReply>* PrepareAsyncrpc_getFileStatRaw(::grpc::ClientContext* context, const ::afsgrpc::StatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::afsgrpc::ListDirReply>* rpc_listDirRaw(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request) override;
    ::grpc::ClientAsyncReader< ::afsgrpc::ListDirReply>* Asyncrpc_listDirRaw(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::afsgrpc::ListDirReply>* PrepareAsyncrpc_listDirRaw(::grpc::ClientContext* context, const ::afsgrpc::ListDirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>* Asyncrpc_rmdirRaw(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>* PrepareAsyncrpc_rmdirRaw(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>* Asyncrpc_unlinkRaw(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>* PrepareAsyncrpc_unlinkRaw(::grpc::ClientContext* context, const ::afsgrpc::String& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>* Asyncrpc_mkdirRaw(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::afsgrpc::OutputInfo>* PrepareAsyncrpc_mkdirRaw(::grpc::ClientContext* context, const ::afsgrpc::MkdirRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_fetch_;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_store_;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_getFileStat_;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_listDir_;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_rmdir_;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_unlink_;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_mkdir_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::afsgrpc::HelloRequest* request, ::afsgrpc::HelloReply* response);
    virtual ::grpc::Status rpc_fetch(::grpc::ServerContext* context, const ::afsgrpc::FetchRequest* request, ::afsgrpc::FetchReply* response);
    virtual ::grpc::Status rpc_store(::grpc::ServerContext* context, const ::afsgrpc::StoreRequest* request, ::afsgrpc::StoreReply* response);
    virtual ::grpc::Status rpc_getFileStat(::grpc::ServerContext* context, const ::afsgrpc::StatRequest* request, ::afsgrpc::StatReply* response);
    virtual ::grpc::Status rpc_listDir(::grpc::ServerContext* context, const ::afsgrpc::ListDirRequest* request, ::grpc::ServerWriter< ::afsgrpc::ListDirReply>* writer);
    virtual ::grpc::Status rpc_rmdir(::grpc::ServerContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response);
    virtual ::grpc::Status rpc_unlink(::grpc::ServerContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response);
    virtual ::grpc::Status rpc_mkdir(::grpc::ServerContext* context, const ::afsgrpc::MkdirRequest* request, ::afsgrpc::OutputInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::afsgrpc::HelloRequest* /*request*/, ::afsgrpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::afsgrpc::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsgrpc::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_fetch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_rpc_fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_fetch(::grpc::ServerContext* /*context*/, const ::afsgrpc::FetchRequest* /*request*/, ::afsgrpc::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_fetch(::grpc::ServerContext* context, ::afsgrpc::FetchRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsgrpc::FetchReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_store() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_rpc_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_store(::grpc::ServerContext* /*context*/, const ::afsgrpc::StoreRequest* /*request*/, ::afsgrpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_store(::grpc::ServerContext* context, ::afsgrpc::StoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsgrpc::StoreReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_getFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_getFileStat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_rpc_getFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_getFileStat(::grpc::ServerContext* /*context*/, const ::afsgrpc::StatRequest* /*request*/, ::afsgrpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_getFileStat(::grpc::ServerContext* context, ::afsgrpc::StatRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsgrpc::StatReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_listDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_listDir() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_rpc_listDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_listDir(::grpc::ServerContext* /*context*/, const ::afsgrpc::ListDirRequest* /*request*/, ::grpc::ServerWriter< ::afsgrpc::ListDirReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_listDir(::grpc::ServerContext* context, ::afsgrpc::ListDirRequest* request, ::grpc::ServerAsyncWriter< ::afsgrpc::ListDirReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_rmdir() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_rpc_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_rmdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_rmdir(::grpc::ServerContext* context, ::afsgrpc::String* request, ::grpc::ServerAsyncResponseWriter< ::afsgrpc::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_unlink() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_rpc_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_unlink(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_unlink(::grpc::ServerContext* context, ::afsgrpc::String* request, ::grpc::ServerAsyncResponseWriter< ::afsgrpc::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_mkdir() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_rpc_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_mkdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::MkdirRequest* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_mkdir(::grpc::ServerContext* context, ::afsgrpc::MkdirRequest* request, ::grpc::ServerAsyncResponseWriter< ::afsgrpc::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_rpc_fetch<WithAsyncMethod_rpc_store<WithAsyncMethod_rpc_getFileStat<WithAsyncMethod_rpc_listDir<WithAsyncMethod_rpc_rmdir<WithAsyncMethod_rpc_unlink<WithAsyncMethod_rpc_mkdir<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::afsgrpc::HelloRequest, ::afsgrpc::HelloReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsgrpc::HelloRequest* request, ::afsgrpc::HelloReply* response) { return this->SayHello(context, request, response); }));}
    void SetMessageAllocatorFor_SayHello(
        ::grpc::MessageAllocator< ::afsgrpc::HelloRequest, ::afsgrpc::HelloReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsgrpc::HelloRequest, ::afsgrpc::HelloReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::afsgrpc::HelloRequest* /*request*/, ::afsgrpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::afsgrpc::HelloRequest* /*request*/, ::afsgrpc::HelloReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rpc_fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_fetch() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::afsgrpc::FetchRequest, ::afsgrpc::FetchReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsgrpc::FetchRequest* request, ::afsgrpc::FetchReply* response) { return this->rpc_fetch(context, request, response); }));}
    void SetMessageAllocatorFor_rpc_fetch(
        ::grpc::MessageAllocator< ::afsgrpc::FetchRequest, ::afsgrpc::FetchReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsgrpc::FetchRequest, ::afsgrpc::FetchReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rpc_fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_fetch(::grpc::ServerContext* /*context*/, const ::afsgrpc::FetchRequest* /*request*/, ::afsgrpc::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_fetch(
      ::grpc::CallbackServerContext* /*context*/, const ::afsgrpc::FetchRequest* /*request*/, ::afsgrpc::FetchReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rpc_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_store() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::afsgrpc::StoreRequest, ::afsgrpc::StoreReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsgrpc::StoreRequest* request, ::afsgrpc::StoreReply* response) { return this->rpc_store(context, request, response); }));}
    void SetMessageAllocatorFor_rpc_store(
        ::grpc::MessageAllocator< ::afsgrpc::StoreRequest, ::afsgrpc::StoreReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsgrpc::StoreRequest, ::afsgrpc::StoreReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rpc_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_store(::grpc::ServerContext* /*context*/, const ::afsgrpc::StoreRequest* /*request*/, ::afsgrpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_store(
      ::grpc::CallbackServerContext* /*context*/, const ::afsgrpc::StoreRequest* /*request*/, ::afsgrpc::StoreReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rpc_getFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_getFileStat() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::afsgrpc::StatRequest, ::afsgrpc::StatReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsgrpc::StatRequest* request, ::afsgrpc::StatReply* response) { return this->rpc_getFileStat(context, request, response); }));}
    void SetMessageAllocatorFor_rpc_getFileStat(
        ::grpc::MessageAllocator< ::afsgrpc::StatRequest, ::afsgrpc::StatReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsgrpc::StatRequest, ::afsgrpc::StatReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rpc_getFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_getFileStat(::grpc::ServerContext* /*context*/, const ::afsgrpc::StatRequest* /*request*/, ::afsgrpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_getFileStat(
      ::grpc::CallbackServerContext* /*context*/, const ::afsgrpc::StatRequest* /*request*/, ::afsgrpc::StatReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rpc_listDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_listDir() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::afsgrpc::ListDirRequest, ::afsgrpc::ListDirReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsgrpc::ListDirRequest* request) { return this->rpc_listDir(context, request); }));
    }
    ~WithCallbackMethod_rpc_listDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_listDir(::grpc::ServerContext* /*context*/, const ::afsgrpc::ListDirRequest* /*request*/, ::grpc::ServerWriter< ::afsgrpc::ListDirReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::afsgrpc::ListDirReply>* rpc_listDir(
      ::grpc::CallbackServerContext* /*context*/, const ::afsgrpc::ListDirRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rpc_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_rmdir() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::afsgrpc::String, ::afsgrpc::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response) { return this->rpc_rmdir(context, request, response); }));}
    void SetMessageAllocatorFor_rpc_rmdir(
        ::grpc::MessageAllocator< ::afsgrpc::String, ::afsgrpc::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsgrpc::String, ::afsgrpc::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rpc_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_rmdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_rmdir(
      ::grpc::CallbackServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rpc_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_unlink() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::afsgrpc::String, ::afsgrpc::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsgrpc::String* request, ::afsgrpc::OutputInfo* response) { return this->rpc_unlink(context, request, response); }));}
    void SetMessageAllocatorFor_rpc_unlink(
        ::grpc::MessageAllocator< ::afsgrpc::String, ::afsgrpc::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsgrpc::String, ::afsgrpc::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rpc_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_unlink(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_unlink(
      ::grpc::CallbackServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rpc_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_mkdir() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::afsgrpc::MkdirRequest, ::afsgrpc::OutputInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::afsgrpc::MkdirRequest* request, ::afsgrpc::OutputInfo* response) { return this->rpc_mkdir(context, request, response); }));}
    void SetMessageAllocatorFor_rpc_mkdir(
        ::grpc::MessageAllocator< ::afsgrpc::MkdirRequest, ::afsgrpc::OutputInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::afsgrpc::MkdirRequest, ::afsgrpc::OutputInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rpc_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_mkdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::MkdirRequest* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::afsgrpc::MkdirRequest* /*request*/, ::afsgrpc::OutputInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SayHello<WithCallbackMethod_rpc_fetch<WithCallbackMethod_rpc_store<WithCallbackMethod_rpc_getFileStat<WithCallbackMethod_rpc_listDir<WithCallbackMethod_rpc_rmdir<WithCallbackMethod_rpc_unlink<WithCallbackMethod_rpc_mkdir<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::afsgrpc::HelloRequest* /*request*/, ::afsgrpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rpc_fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_fetch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_rpc_fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_fetch(::grpc::ServerContext* /*context*/, const ::afsgrpc::FetchRequest* /*request*/, ::afsgrpc::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rpc_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_store() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_rpc_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_store(::grpc::ServerContext* /*context*/, const ::afsgrpc::StoreRequest* /*request*/, ::afsgrpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rpc_getFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_getFileStat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_rpc_getFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_getFileStat(::grpc::ServerContext* /*context*/, const ::afsgrpc::StatRequest* /*request*/, ::afsgrpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rpc_listDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_listDir() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_rpc_listDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_listDir(::grpc::ServerContext* /*context*/, const ::afsgrpc::ListDirRequest* /*request*/, ::grpc::ServerWriter< ::afsgrpc::ListDirReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rpc_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_rmdir() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_rpc_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_rmdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rpc_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_unlink() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_rpc_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_unlink(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rpc_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_mkdir() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_rpc_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_mkdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::MkdirRequest* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::afsgrpc::HelloRequest* /*request*/, ::afsgrpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_fetch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_rpc_fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_fetch(::grpc::ServerContext* /*context*/, const ::afsgrpc::FetchRequest* /*request*/, ::afsgrpc::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_fetch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_store() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_rpc_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_store(::grpc::ServerContext* /*context*/, const ::afsgrpc::StoreRequest* /*request*/, ::afsgrpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_store(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_getFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_getFileStat() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_rpc_getFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_getFileStat(::grpc::ServerContext* /*context*/, const ::afsgrpc::StatRequest* /*request*/, ::afsgrpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_getFileStat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_listDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_listDir() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_rpc_listDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_listDir(::grpc::ServerContext* /*context*/, const ::afsgrpc::ListDirRequest* /*request*/, ::grpc::ServerWriter< ::afsgrpc::ListDirReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_listDir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_rmdir() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_rpc_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_rmdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_rmdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_unlink() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_rpc_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_unlink(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_unlink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_mkdir() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_rpc_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_mkdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::MkdirRequest* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_mkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SayHello() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SayHello(context, request, response); }));
    }
    ~WithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::afsgrpc::HelloRequest* /*request*/, ::afsgrpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SayHello(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_fetch() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rpc_fetch(context, request, response); }));
    }
    ~WithRawCallbackMethod_rpc_fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_fetch(::grpc::ServerContext* /*context*/, const ::afsgrpc::FetchRequest* /*request*/, ::afsgrpc::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_fetch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_store() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rpc_store(context, request, response); }));
    }
    ~WithRawCallbackMethod_rpc_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_store(::grpc::ServerContext* /*context*/, const ::afsgrpc::StoreRequest* /*request*/, ::afsgrpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_store(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_getFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_getFileStat() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rpc_getFileStat(context, request, response); }));
    }
    ~WithRawCallbackMethod_rpc_getFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_getFileStat(::grpc::ServerContext* /*context*/, const ::afsgrpc::StatRequest* /*request*/, ::afsgrpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_getFileStat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_listDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_listDir() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->rpc_listDir(context, request); }));
    }
    ~WithRawCallbackMethod_rpc_listDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_listDir(::grpc::ServerContext* /*context*/, const ::afsgrpc::ListDirRequest* /*request*/, ::grpc::ServerWriter< ::afsgrpc::ListDirReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* rpc_listDir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_rmdir() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rpc_rmdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_rpc_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_rmdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_rmdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_unlink() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rpc_unlink(context, request, response); }));
    }
    ~WithRawCallbackMethod_rpc_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_unlink(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_unlink(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_mkdir() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rpc_mkdir(context, request, response); }));
    }
    ~WithRawCallbackMethod_rpc_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_mkdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::MkdirRequest* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_mkdir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsgrpc::HelloRequest, ::afsgrpc::HelloReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsgrpc::HelloRequest, ::afsgrpc::HelloReply>* streamer) {
                       return this->StreamedSayHello(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* /*context*/, const ::afsgrpc::HelloRequest* /*request*/, ::afsgrpc::HelloReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsgrpc::HelloRequest,::afsgrpc::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rpc_fetch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rpc_fetch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsgrpc::FetchRequest, ::afsgrpc::FetchReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsgrpc::FetchRequest, ::afsgrpc::FetchReply>* streamer) {
                       return this->Streamedrpc_fetch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rpc_fetch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_fetch(::grpc::ServerContext* /*context*/, const ::afsgrpc::FetchRequest* /*request*/, ::afsgrpc::FetchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrpc_fetch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsgrpc::FetchRequest,::afsgrpc::FetchReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rpc_store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rpc_store() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsgrpc::StoreRequest, ::afsgrpc::StoreReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsgrpc::StoreRequest, ::afsgrpc::StoreReply>* streamer) {
                       return this->Streamedrpc_store(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rpc_store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_store(::grpc::ServerContext* /*context*/, const ::afsgrpc::StoreRequest* /*request*/, ::afsgrpc::StoreReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrpc_store(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsgrpc::StoreRequest,::afsgrpc::StoreReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rpc_getFileStat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rpc_getFileStat() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsgrpc::StatRequest, ::afsgrpc::StatReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsgrpc::StatRequest, ::afsgrpc::StatReply>* streamer) {
                       return this->Streamedrpc_getFileStat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rpc_getFileStat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_getFileStat(::grpc::ServerContext* /*context*/, const ::afsgrpc::StatRequest* /*request*/, ::afsgrpc::StatReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrpc_getFileStat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsgrpc::StatRequest,::afsgrpc::StatReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rpc_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rpc_rmdir() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsgrpc::String, ::afsgrpc::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsgrpc::String, ::afsgrpc::OutputInfo>* streamer) {
                       return this->Streamedrpc_rmdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rpc_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_rmdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrpc_rmdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsgrpc::String,::afsgrpc::OutputInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rpc_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rpc_unlink() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsgrpc::String, ::afsgrpc::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsgrpc::String, ::afsgrpc::OutputInfo>* streamer) {
                       return this->Streamedrpc_unlink(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rpc_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_unlink(::grpc::ServerContext* /*context*/, const ::afsgrpc::String* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrpc_unlink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsgrpc::String,::afsgrpc::OutputInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rpc_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rpc_mkdir() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::afsgrpc::MkdirRequest, ::afsgrpc::OutputInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::afsgrpc::MkdirRequest, ::afsgrpc::OutputInfo>* streamer) {
                       return this->Streamedrpc_mkdir(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rpc_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_mkdir(::grpc::ServerContext* /*context*/, const ::afsgrpc::MkdirRequest* /*request*/, ::afsgrpc::OutputInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrpc_mkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::afsgrpc::MkdirRequest,::afsgrpc::OutputInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_rpc_fetch<WithStreamedUnaryMethod_rpc_store<WithStreamedUnaryMethod_rpc_getFileStat<WithStreamedUnaryMethod_rpc_rmdir<WithStreamedUnaryMethod_rpc_unlink<WithStreamedUnaryMethod_rpc_mkdir<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_rpc_listDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_rpc_listDir() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::afsgrpc::ListDirRequest, ::afsgrpc::ListDirReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::afsgrpc::ListDirRequest, ::afsgrpc::ListDirReply>* streamer) {
                       return this->Streamedrpc_listDir(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_rpc_listDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_listDir(::grpc::ServerContext* /*context*/, const ::afsgrpc::ListDirRequest* /*request*/, ::grpc::ServerWriter< ::afsgrpc::ListDirReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedrpc_listDir(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::afsgrpc::ListDirRequest,::afsgrpc::ListDirReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_rpc_listDir<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_rpc_fetch<WithStreamedUnaryMethod_rpc_store<WithStreamedUnaryMethod_rpc_getFileStat<WithSplitStreamingMethod_rpc_listDir<WithStreamedUnaryMethod_rpc_rmdir<WithStreamedUnaryMethod_rpc_unlink<WithStreamedUnaryMethod_rpc_mkdir<Service > > > > > > > > StreamedService;
};

}  // namespace afsgrpc


#endif  // GRPC_afsgrpc_2eproto__INCLUDED
